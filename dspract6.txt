bredth first search:-
#include<iostream>
#include<list>
using namespace std;

class Graph
{
	int V;
	list<int> *adj;
public:
	Graph(int V);
	void addEdge(int v, int w);
	void BFS(int s);
};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w);
}

void Graph::BFS(int s)
{
	bool *visited = new bool[V];
	for(int i = 0; i < V; i++)
		visited[i] = false;

	list<int> queue;

	visited[s] = true;
	queue.push_back(s);

	list<int>::iterator i;

	while(!queue.empty())
	{
		s = queue.front();
		cout << s << " ";
		queue.pop_front();

		for (i = adj[s].begin(); i != adj[s].end(); ++i)
		{
			if (!visited[*i])
			{
				visited[*i] = true;
				queue.push_back(*i);
			}
		}
	}
}

int main()
{
    int vt,e,u,v,start;
    cout<<" Breadth First Search Implementation\n"<<endl;
    cout<<"Enter number of vertices"<<endl;
	cin>>vt;
Graph g(vt);

    cout<<"Enter number of edges"<<endl;
	cin>>e;

	for(int i=0;i<e;i++)
	{
		cout<<"Enter from"<<endl;
		cin>>u;
		cout<<"Enter To"<<endl;
		cin>>v;
		g.addEdge(u,v);
	}

	cout<<"Enter start vertex"<<endl;
	cin>>start;
	cout<<"Breadth First traversal of the Graph is "<<endl;
	g.BFS(start);
	return 0;
}
priorityqueue1:-
#include<iostream>
using namespace std;

class node          //Child class
{
	public:
		int data;
		node *next;
		int priority;
};

class queue         //Parent class
{
	node *front;
	node *rear;
	public:
		queue()
		{
			front = rear = NULL;
		}
		
		void enqueue(int num, int p)
		{
			node *temp, *priority;
			node *new_node = new node();
			new_node -> data = num;
			new_node -> priority = p;
			new_node -> next = NULL;
			temp = front;
			if(temp!=NULL)
			{
				if(temp->priority > p)
				{
					new_node->next=temp;
					front=new_node;
				}
				
				else if(rear->priority<p)
				{
					rear->next=new_node;
					rear=new_node;
				}
				
				else
				{
					while(temp!=NULL)
					{
						if(temp->priority>p)
						break;
						priority=temp;
						temp=temp->next;
					}
					new_node -> next = priority->next;
					priority->next = new_node;
				}
			}
			else
			{
				rear=front=new_node;
			}
		}
		
		int dequeue()
		{
			node *temp;
			temp = front;
			if(front==NULL)
			{
				cout<<"Queue is empty";
				return 0;
			}
			
			int val = temp -> data;
			if(front == rear)
			{
				front = rear = NULL;
				delete temp;
			}
			else
			{
				front = temp -> next;
				delete temp;
			}
			return val;
		}
		
		void display()
		{
			node *temp;
			temp = front;
			cout<<"\n\n  Queue:  ";
			while(temp!=NULL)
			{
				cout<< temp -> data<<" ->  ";
				temp = temp -> next;
			}
			cout<<"NULL";
		}
		
		void addition_atfront(int num)
		{
			node *new_node = new node();
			new_node -> data = num;
			new_node -> next = front;
			front = new_node;
		}
		
		int deletion_fromrear()
		{
			int n;
			node *ptr,*temp;
			temp=front;
			if(front==NULL)
			{
				cout<<"Queue is empty";
				return 0;
			}
			if(front==rear)
			{
				n=front->data;
				delete front;
				front=rear=NULL;				
			}
			else 
    		{
		        while (temp->next!=rear)
				{
					temp=temp->next;
				}
				ptr=rear;
				n=ptr->data;
				rear=temp;
				temp->next=NULL;
				delete(ptr);				        
			}
			return n;
		}		
};

int main()
{
	queue q;
	char ch='y';
	int option, x;
	while(ch!='n')
	{
		cout<<"Implementation of Priority Queue \n"<<endl;
		cout<<"\n\n1.Addition of elements from rear";
		cout<<"\n2.Deletion of elements from front";
		cout<<"\n3.Adddition of elements at front";
		cout<<"\n4.Deletion of elements from rear";
		cout<<"\n5.Exit";
		cout<<"\nEnter an option: ";
		cin>>option;
		switch(option)
		{
			case 1:
			{
				q.enqueue(10,3);
				q.enqueue(20,2);
				q.enqueue(30,1);
				q.enqueue(40,4);
				q.display();
				break;
			}
			
			case 2:
			{
				q.dequeue();
				q.display();
				break;
			}
			
			case 3:
			{
				q.addition_atfront(11);
				q.addition_atfront(12);
				q.display();
				break;
			}
			
			case 4:
			{
				q.deletion_fromrear();
				q.display();
				break;
			}
			
			case 5:
			{
				ch='n';
				break;
			}
			
			default:
			{
		 		cout<<"Please choose option between 1-5!!";
				break;
			}
		}
	}	
}



priorityqueue2:-
#include <iostream>
using namespace std;
struct Node
{
    int data;
    int priority;
    struct Node *next;
};
Node *front = NULL;
Node *rear = NULL;
int Size = 0;
void insert(int val, int pr)
{
    Node *q;
    Node *temp = new Node;
    temp->data = val;
    temp->priority = pr;
    if (front == NULL || pr < front->priority)
    {
        temp->next = front;
        front = temp;
    }
    else
    {
        q = front;
        while (q->next != NULL && q->next->priority <= pr)
        {
          q = q->next;
        }
        temp->next = q->next;
        q->next = temp;
    }
    Size++;
}
void del()
{
    Node *temp;
    if (front == NULL)
    {
        cout << "Priority Queue is empty\n" << endl;
    }
    else
    {
        temp = front;
        cout << "Element deleted from priority queue is: " << temp->data << endl;
        front = front->next;
        delete temp;
        Size--;
    }
}
void display()
{
    Node *ptr;
    ptr = front;
    if (front == NULL)
    {
        cout << "Priority Queue is empty\n" << endl;
    }
    else{
        cout << "Priority Queue is: \n";
        cout << "Priority       Item\n";
        while (ptr != NULL)
        {
            cout << ptr->priority << "\t" << ptr->data << "\n";
            ptr = ptr->next;
        }
    }
}
int main()
{
 int choice, n, pr;
    int val;
    cout<<"Implementation of Priority Queue \n"<<endl;
   
      cout<<"1) Insert element to queue."<<endl;
	  cout<<"2) Delete element from queue."<<endl;
   	  cout<<"3) Display all the elements of queue."<<endl;
      cout<<"4) Exit.\n"<<endl;
    do
    {
        cout<<"Enter the Choice: "<<endl;
        cin>>choice;
        switch (choice)
        {
        case 1:
            cout << "Enter your value: ";
            cin >> n;
            cout << "Enter your priority: ";
            cin >> pr;
            insert(n, pr);
            break;
        case 2:
            del();
            break;
        case 3:
            display();
            break;
        case 4:
            exit(0);
        default:
             cout<<"Invalid Input!, Please Enter a Valid Choice(1/2/3/4) \n"<<endl;
        }
    }
    while(choice!=4);
    return 0;
}



